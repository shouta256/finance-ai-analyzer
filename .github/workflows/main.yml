name: Web CI (Vercel) + Backend tests

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  web-ci:
    name: Web - Lint/Test/Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          # Use the version declared in package.json `packageManager` (pnpm@9.x)
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install deps (apps/web)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f apps/web/pnpm-lock.yaml ]; then
            echo "Found apps/web/pnpm-lock.yaml -> using --frozen-lockfile"
            pnpm -C apps/web install --frozen-lockfile
          else
            echo "apps/web/pnpm-lock.yaml not found -> using --no-frozen-lockfile"
            pnpm -C apps/web install --no-frozen-lockfile
          fi

      - name: Run unit tests (apps/web)
        run: pnpm -C apps/web test

      - name: Build (apps/web)
        run: pnpm -C apps/web build


  backend-tests:
    name: Backend - Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Run tests (ledger-svc)
        run: ./apps/ledger-svc/gradlew -p apps/ledger-svc test

  deploy-lambda:
    name: Deploy Lambda (hello-http)
    needs: [web-ci, backend-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build Lambda layer (pg)
        run: |
          set -euo pipefail
          rm -rf dist
          mkdir -p dist/layer/nodejs
          npm install pg --prefix dist/layer/nodejs
          (cd dist/layer && zip -r ../pg-layer.zip nodejs)

      - name: Package Lambda source
        run: |
          set -euo pipefail
          mkdir -p dist/lambda
          cp infra/lambda/index.js dist/lambda/
          npm install aws-sdk --prefix dist/lambda
          (cd dist/lambda && zip ../lambda.zip index.js)

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: us-east-1

      - name: Publish pg layer
        id: publish_layer
        run: |
          ARCH=${{ vars.LAMBDA_ARCHITECTURE || 'x86_64' }}
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name safepocket-pg-node20 \
            --description "pg client for Safepocket" \
            --compatible-runtimes nodejs20.x \
            --compatible-architectures ${ARCH} \
            --zip-file fileb://dist/pg-layer.zip \
            --query 'LayerVersionArn' \
            --output text)
          echo "layer_arn=$LAYER_ARN" >> "$GITHUB_OUTPUT"

      - name: Update Lambda code
        run: |
          FUNCTION_NAME=${{ secrets.LAMBDA_FUNCTION_NAME || 'hello-http' }}
          aws lambda update-function-code \
            --function-name "$FUNCTION_NAME" \
            --zip-file fileb://dist/lambda.zip

      - name: Wait for Lambda to stabilize
        run: |
          FUNCTION_NAME=${{ secrets.LAMBDA_FUNCTION_NAME || 'hello-http' }}
          # Wait until the previous update has completed to avoid ResourceConflictException
          aws lambda wait function-updated --function-name "$FUNCTION_NAME"

      - name: Attach latest layer
        run: |
          FUNCTION_NAME=${{ secrets.LAMBDA_FUNCTION_NAME || 'hello-http' }}
          aws lambda update-function-configuration \
            --function-name "$FUNCTION_NAME" \
            --layers ${{ steps.publish_layer.outputs.layer_arn }}
