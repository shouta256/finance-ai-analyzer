name: Deploy to ECS

on:
  push:
    branches: [ main ]   # ← 任意のブランチ

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: "023886152624"
  ECS_CLUSTER: safepocket-cluster
  # サービス名（あなたの実名）
  ECS_SERVICE_BE: safepocket-ledger-svc-service-2f0u2cu0
  ECS_SERVICE_WEB: safepocket-next-web-service-68os670g
  # ECR リポジトリ名（推定。違う場合は修正）
  ECR_REPO_BE: ledger-svc
  ECR_REPO_WEB: next-web
  # コンテナ名（タスク定義内の name と一致させる）
  CONTAINER_BE: ledger-svc
  CONTAINER_WEB: next-web
  # Plaid credentials (provided via GitHub Secrets)
  PLAID_CLIENT_ID: ${{ secrets.PLAID_CLIENT_ID }}
  PLAID_CLIENT_SECRET: ${{ secrets.PLAID_CLIENT_SECRET }}
  PLAID_ENV: ${{ secrets.PLAID_ENV }}
  PLAID_BASE_URL: ${{ secrets.PLAID_BASE_URL }}
  PLAID_REDIRECT_URI: ${{ secrets.PLAID_REDIRECT_URI }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # AWS 認証（OIDC）
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-ecs-deploy  # ← ①で作ったロール名

      # ECR ログイン
      - uses: aws-actions/amazon-ecr-login@v2
        id: ecr

      - name: Compute image tags
        id: meta
        run: |
          SHA=${GITHUB_SHA::7}
          echo "TAG=${SHA}" >> $GITHUB_OUTPUT
          echo "ECR_BE=${{ steps.ecr.outputs.registry }}/${ECR_REPO_BE}:${SHA}" >> $GITHUB_OUTPUT
          echo "ECR_WEB=${{ steps.ecr.outputs.registry }}/${ECR_REPO_WEB}:${SHA}" >> $GITHUB_OUTPUT

      # --- Backend イメージ build & push ---
      - name: Build BE image
        run: |
          docker build -t "${{ steps.meta.outputs.ECR_BE }}" ./backend   # ← backend の Dockerfile 位置に合わせる
      - name: Push BE image
        run: docker push "${{ steps.meta.outputs.ECR_BE }}"

      # --- Web イメージ build & push ---
      - name: Build WEB image
        run: |
          docker build -t "${{ steps.meta.outputs.ECR_WEB }}" ./web      # ← web の Dockerfile 位置に合わせる
      - name: Push WEB image
        run: docker push "${{ steps.meta.outputs.ECR_WEB }}"

      # jq インストール
      - run: sudo apt-get update && sudo apt-get install -y jq

      # --- BE: 現行タスク定義を取得→image 置換→再登録 ---
      - name: Update BE task definition
        run: |
          TD_ARN=$(aws ecs describe-services --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE_BE" \
            --query 'services[0].taskDefinition' --output text)
          aws ecs describe-task-definition --task-definition "$TD_ARN" --query 'taskDefinition' > td-be.json

          # クリーニング
          jq 'del(.taskDefinitionArn,.revision,.status,.registeredAt,.registeredBy,.compatibilities,.requiresAttributes)' td-be.json > td-be.clean.json

          # コンテナ image 差し替え & Plaid 環境変数を上書き
          jq \
            --arg name "$CONTAINER_BE" \
            --arg img "${{ steps.meta.outputs.ECR_BE }}" \
            --arg plaidClientId "$PLAID_CLIENT_ID" \
            --arg plaidClientSecret "$PLAID_CLIENT_SECRET" \
            --arg plaidEnv "$PLAID_ENV" \
            --arg plaidBaseUrl "$PLAID_BASE_URL" \
            --arg plaidRedirectUri "${PLAID_REDIRECT_URI:-}" '
            .containerDefinitions |= (
              map(
                if .name == $name then
                  .image = $img
                  | .environment = (
                      (.environment // [])
                      | map(select(
                          .name != "PLAID_CLIENT_ID"
                          and .name != "PLAID_CLIENT_SECRET"
                          and .name != "PLAID_ENV"
                          and .name != "PLAID_BASE_URL"
                          and .name != "PLAID_REDIRECT_URI"
                        ))
                      + [
                          { name: "PLAID_CLIENT_ID", value: $plaidClientId },
                          { name: "PLAID_CLIENT_SECRET", value: $plaidClientSecret },
                          { name: "PLAID_ENV", value: $plaidEnv },
                          { name: "PLAID_BASE_URL", value: $plaidBaseUrl }
                        ]
                      + (if ($plaidRedirectUri | length) > 0 then
                          [ { name: "PLAID_REDIRECT_URI", value: $plaidRedirectUri } ]
                        else [] end)
                    )
                else . end
              )
            )
          ' td-be.clean.json > td-be.new.json

          NEW_TD_ARN=$(aws ecs register-task-definition --cli-input-json file://td-be.new.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)

          aws ecs update-service --cluster "$ECS_CLUSTER" --service "$ECS_SERVICE_BE" \
            --task-definition "$NEW_TD_ARN" --force-new-deployment
          echo "BE_NEW_TD=$NEW_TD_ARN"

      # --- WEB: 同様に差し替え→デプロイ ---
      - name: Update WEB task definition
        run: |
          TD_ARN=$(aws ecs describe-services --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE_WEB" \
            --query 'services[0].taskDefinition' --output text)
          aws ecs describe-task-definition --task-definition "$TD_ARN" --query 'taskDefinition' > td-web.json

          jq 'del(.taskDefinitionArn,.revision,.status,.registeredAt,.registeredBy,.compatibilities,.requiresAttributes)' td-web.json > td-web.clean.json

          jq --arg name "$CONTAINER_WEB" --arg img "${{ steps.meta.outputs.ECR_WEB }}" '
            .containerDefinitions |=
              (map(if .name==$name then .image=$img else . end))
          ' td-web.clean.json > td-web.new.json

          NEW_TD_ARN=$(aws ecs register-task-definition --cli-input-json file://td-web.new.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)

          aws ecs update-service --cluster "$ECS_CLUSTER" --service "$ECS_SERVICE_WEB" \
            --task-definition "$NEW_TD_ARN" --force-new-deployment
          echo "WEB_NEW_TD=$NEW_TD_ARN"

      # 安定化待ち（任意）
      - name: Wait services stable
        run: |
          aws ecs wait services-stable --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE_BE"
          aws ecs wait services-stable --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE_WEB"
