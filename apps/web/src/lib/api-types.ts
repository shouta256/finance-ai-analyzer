/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/plaid/link-token": {
    /** Create Plaid link token */
    post: operations["createPlaidLinkToken"];
  };
  "/plaid/exchange": {
    /** Exchange Plaid public token for access token */
    post: operations["exchangePlaidPublicToken"];
  };
  "/transactions/sync": {
    /** Trigger Plaid transaction sync */
    post: operations["triggerTransactionSync"];
  };
  "/transactions": {
    /** List transactions for a user and month */
    get: operations["listTransactions"];
  };
  "/transactions/{transactionId}": {
    /** Update selected properties of a transaction */
    patch: operations["updateTransaction"];
  };
  "/analytics/summary": {
    /** Retrieve monthly analytics summary */
    get: operations["getAnalyticsSummary"];
  };
  "/ai/chat": {
    /** Send a chat message to AI assistant */
    post: operations["sendAiChatMessage"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    PlaidLinkTokenResponse: {
      /** @description Plaid Link token */
      linkToken: string;
      /**
       * Format: date-time
       * @description Expiration timestamp for the link token
       */
      expiration: string;
      /** @description Plaid request identifier */
      requestId: string;
    };
    PlaidExchangeRequest: {
      /** @description Plaid public token obtained from Link */
      publicToken: string;
    };
    PlaidExchangeResponse: {
      /** @description Plaid item identifier associated with the user */
      itemId: string;
      /**
       * @description Status of exchange request
       * @enum {string}
       */
      status: "SUCCESS";
      /** @description Plaid request identifier */
      requestId: string;
    };
    TransactionsSyncRequest: {
      /** @description Cursor from last sync to request incremental updates */
      cursor?: string;
      /**
       * @description Force a full backfill of transactions
       * @default false
       */
      forceFullSync?: boolean;
      /**
       * @description When true, load demo accounts and sample transactions instead of calling Plaid
       * @default false
       */
      demoSeed?: boolean;
    };
    TransactionsSyncResponse: {
      /** @enum {string} */
      status: "STARTED" | "COMPLETED";
      /**
       * Format: int32
       * @description Number of transactions queued for processing
       */
      syncedCount: number;
      /**
       * Format: int32
       * @description Number of transactions remaining in backlog
       */
      pendingCount: number;
      /** @description Identifier for correlating async sync operations */
      traceId: string;
    };
    TransactionsListResponse: {
      /** @description Requested month window (YYYY-MM) */
      month: string;
      transactions: components["schemas"]["Transaction"][];
      /** @description Request trace identifier for auditing */
      traceId: string;
    };
    Transaction: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      userId: string;
      /** Format: uuid */
      accountId: string;
      merchantName: string;
      /** Format: double */
      amount: number;
      currency: string;
      /** Format: date-time */
      occurredAt: string;
      /** Format: date-time */
      authorizedAt?: string | null;
      pending: boolean;
      category: string;
      description?: string | null;
      anomalyScore?: components["schemas"]["AnomalyScore"];
    };
    TransactionUpdateRequest: {
      /** @description New category name to assign */
      category?: string;
      /** @description Analyst notes for the transaction */
      notes?: string;
    };
    AnalyticsSummaryResponse: {
      /** @description Month covered by the analytics (YYYY-MM) */
      month: string;
      totals: components["schemas"]["AnalyticsTotals"];
      byCategory: components["schemas"]["CategoryBreakdown"][];
      topMerchants: components["schemas"]["MerchantBreakdown"][];
      anomalies: components["schemas"]["AnomalyInsight"][];
      aiHighlight: components["schemas"]["AiHighlight"];
      /** @description Identifier for correlating AI computations */
      traceId: string;
    };
    AnalyticsTotals: {
      /** Format: double */
      income: number;
      /** Format: double */
      expense: number;
      /** Format: double */
      net: number;
    };
    CategoryBreakdown: {
      category: string;
      /** Format: double */
      amount: number;
      /**
       * Format: double
       * @description Portion of expense represented by the category
       */
      percentage: number;
    };
    MerchantBreakdown: {
      merchant: string;
      /** Format: double */
      amount: number;
      /** Format: int32 */
      transactionCount: number;
    };
    AnomalyScore: {
      /** @enum {string} */
      method: "Z_SCORE" | "IQR";
      /**
       * Format: double
       * @description Absolute difference compared to typical spend for this merchant/category
       */
      deltaAmount: number;
      /**
       * Format: double
       * @description Percentage share of the month's total expenses accounted for by this transaction
       */
      budgetImpactPercent: number;
      commentary?: string | null;
    };
    AnomalyInsight: {
      /** Format: uuid */
      transactionId: string;
      /** @enum {string} */
      method: "Z_SCORE" | "IQR";
      /** Format: double */
      amount: number;
      /**
       * Format: double
       * @description Absolute difference from typical spend for this merchant/category
       */
      deltaAmount: number;
      /**
       * Format: double
       * @description Percentage share of this month's total expenses
       */
      budgetImpactPercent: number;
      /** Format: date-time */
      occurredAt: string;
      merchantName: string;
      commentary?: string | null;
    };
    AiHighlight: {
      title: string;
      summary: string;
      /** @enum {string} */
      sentiment: "POSITIVE" | "NEUTRAL" | "NEGATIVE";
      /** @description Optional next-best-actions surfaced by AI */
      recommendations?: string[];
    };
    ErrorResponse: {
      error: {
        code: string;
        message: string;
        details?: {
          [key: string]: unknown;
        };
      };
      traceId: string;
    };
    AiChatRequest: {
      /**
       * Format: uuid
       * @description Existing conversation identifier; when omitted a new conversation is started.
       */
      conversationId?: string;
      /** @description User's message content */
      message: string;
      /**
       * Format: uuid
       * @description Trim the stored conversation from this message (inclusive) before appending the new user message.
       */
      truncateFromMessageId?: string;
    };
    AiChatMessage: {
      /** Format: uuid */
      id: string;
      /** @enum {string} */
      role: "USER" | "ASSISTANT";
      content: string;
      /** Format: date-time */
      createdAt: string;
    };
    AiChatResponse: {
      /** Format: uuid */
      conversationId: string;
      messages: components["schemas"]["AiChatMessage"][];
      traceId: string;
    };
  };
  responses: {
    /** @description Error response wrapper */
    ErrorResponse: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Create Plaid link token */
  createPlaidLinkToken: {
    responses: {
      /** @description Link token created */
      200: {
        content: {
          "application/json": components["schemas"]["PlaidLinkTokenResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Exchange Plaid public token for access token */
  exchangePlaidPublicToken: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlaidExchangeRequest"];
      };
    };
    responses: {
      /** @description Exchange recorded successfully */
      200: {
        content: {
          "application/json": components["schemas"]["PlaidExchangeResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Trigger Plaid transaction sync */
  triggerTransactionSync: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TransactionsSyncRequest"];
      };
    };
    responses: {
      /** @description Sync started */
      202: {
        content: {
          "application/json": components["schemas"]["TransactionsSyncResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** List transactions for a user and month */
  listTransactions: {
    parameters: {
      query: {
        /** @description Month to filter transactions by (YYYY-MM) */
        month: string;
        /** @description Filter by account identifier */
        accountId?: string;
      };
    };
    responses: {
      /** @description Transactions retrieved */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionsListResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Update selected properties of a transaction */
  updateTransaction: {
    parameters: {
      path: {
        transactionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionUpdateRequest"];
      };
    };
    responses: {
      /** @description Transaction updated */
      200: {
        content: {
          "application/json": components["schemas"]["Transaction"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Retrieve monthly analytics summary */
  getAnalyticsSummary: {
    parameters: {
      query: {
        /** @description Month to generate analytics for (YYYY-MM) */
        month: string;
        /** @description When true, request backend to generate AI summary via OpenAI. When false, backend returns lightweight/fallback summary. */
        generateAi?: boolean;
      };
    };
    responses: {
      /** @description Analytics summary retrieved */
      200: {
        content: {
          "application/json": components["schemas"]["AnalyticsSummaryResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Send a chat message to AI assistant */
  sendAiChatMessage: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AiChatRequest"];
      };
    };
    responses: {
      /** @description Chat response returned */
      200: {
        content: {
          "application/json": components["schemas"]["AiChatResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
}
